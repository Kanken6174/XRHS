<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classShader" kind="class" language="C++" prot="public">
    <compoundname>Shader</compoundname>
    <includes refid="Shader_8hpp" local="no">Shader.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classShader_1a142a08b6fbdfc982d82ca10ee0b0f38d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Shader::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="18" column="18" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classShader_1aa732beb72038e86aca70a34c369a255e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Shader::Shader</definition>
        <argsstring>(const char *vertexPath, const char *fragmentPath, const char *geometryPath=nullptr)</argsstring>
        <name>Shader</name>
        <param>
          <type>const char *</type>
          <declname>vertexPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fragmentPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>geometryPath</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="21" column="5" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="21" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a870fa9f13d69e558815d6fd351a469dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::use</definition>
        <argsstring>()</argsstring>
        <name>use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="111" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1ab1a56d6c299bd7eaa18c2e142ef7bd9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setBool</definition>
        <argsstring>(const std::string &amp;name, bool value) const</argsstring>
        <name>setBool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="117" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1ad362e2b654cd95a3574cd505411e41fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setInt</definition>
        <argsstring>(const std::string &amp;name, int value) const</argsstring>
        <name>setInt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="122" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afe7367621f74c2d26431d8ac15252bf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setFloat</definition>
        <argsstring>(const std::string &amp;name, float value) const</argsstring>
        <name>setFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="127" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afd4d41322a1cdd1d5155bf124d19debf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec2</definition>
        <argsstring>(const std::string &amp;name, const glm::vec2 &amp;value) const</argsstring>
        <name>setVec2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="132" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afb91bc9e954bf590857c96ab1331b0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec2</definition>
        <argsstring>(const std::string &amp;name, float x, float y) const</argsstring>
        <name>setVec2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="136" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1aeb021061c5d451329d92257b07dbfec3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec3</definition>
        <argsstring>(const std::string &amp;name, const glm::vec3 &amp;value) const</argsstring>
        <name>setVec3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="141" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a90092c25b7dc23964c465b93887300f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec3</definition>
        <argsstring>(const std::string &amp;name, float x, float y, float z) const</argsstring>
        <name>setVec3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="145" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a79cbe674f6bf1a576a48045dcb924de5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec4</definition>
        <argsstring>(const std::string &amp;name, const glm::vec4 &amp;value) const</argsstring>
        <name>setVec4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec4 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="150" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a913e10fe2501b00746ae6901b97a1730" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec4</definition>
        <argsstring>(const std::string &amp;name, float x, float y, float z, float w)</argsstring>
        <name>setVec4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="154" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a91a6ee79b959cacd618c9e29a5bbd732" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat2</definition>
        <argsstring>(const std::string &amp;name, const glm::mat2 &amp;mat) const</argsstring>
        <name>setMat2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat2 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="159" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a3e24fcad187493dfebaa12939072e91d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat3</definition>
        <argsstring>(const std::string &amp;name, const glm::mat3 &amp;mat) const</argsstring>
        <name>setMat3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat3 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="164" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a8e711c96f3e1722cbfb88fde9478977c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat4</definition>
        <argsstring>(const std::string &amp;name, const glm::mat4 &amp;mat) const</argsstring>
        <name>setMat4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="169" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="169" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classShader_1a22055065153d38e63a410cb7e020e905" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::checkCompileErrors</definition>
        <argsstring>(GLuint shader, std::string type)</argsstring>
        <name>checkCompileErrors</name>
        <param>
          <type>GLuint</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="191" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="191" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/KronUIGL/Shaders/Shader.hpp" line="15" column="1" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="16" bodyend="216"/>
    <listofallmembers>
      <member refid="classShader_1a22055065153d38e63a410cb7e020e905" prot="private" virt="non-virtual"><scope>Shader</scope><name>checkCompileErrors</name></member>
      <member refid="classShader_1a142a08b6fbdfc982d82ca10ee0b0f38d" prot="public" virt="non-virtual"><scope>Shader</scope><name>ID</name></member>
      <member refid="classShader_1ab1a56d6c299bd7eaa18c2e142ef7bd9f" prot="public" virt="non-virtual"><scope>Shader</scope><name>setBool</name></member>
      <member refid="classShader_1afe7367621f74c2d26431d8ac15252bf3" prot="public" virt="non-virtual"><scope>Shader</scope><name>setFloat</name></member>
      <member refid="classShader_1ad362e2b654cd95a3574cd505411e41fd" prot="public" virt="non-virtual"><scope>Shader</scope><name>setInt</name></member>
      <member refid="classShader_1a91a6ee79b959cacd618c9e29a5bbd732" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat2</name></member>
      <member refid="classShader_1a3e24fcad187493dfebaa12939072e91d" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat3</name></member>
      <member refid="classShader_1a8e711c96f3e1722cbfb88fde9478977c" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat4</name></member>
      <member refid="classShader_1afd4d41322a1cdd1d5155bf124d19debf" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec2</name></member>
      <member refid="classShader_1afb91bc9e954bf590857c96ab1331b0ec" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec2</name></member>
      <member refid="classShader_1aeb021061c5d451329d92257b07dbfec3" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec3</name></member>
      <member refid="classShader_1a90092c25b7dc23964c465b93887300f9" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec3</name></member>
      <member refid="classShader_1a79cbe674f6bf1a576a48045dcb924de5" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec4</name></member>
      <member refid="classShader_1a913e10fe2501b00746ae6901b97a1730" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec4</name></member>
      <member refid="classShader_1aa732beb72038e86aca70a34c369a255e" prot="public" virt="non-virtual"><scope>Shader</scope><name>Shader</name></member>
      <member refid="classShader_1a870fa9f13d69e558815d6fd351a469dc" prot="public" virt="non-virtual"><scope>Shader</scope><name>use</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
