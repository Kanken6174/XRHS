<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="RotationPaintShader_8cpp" kind="file" language="C++">
    <compoundname>RotationPaintShader.cpp</compoundname>
    <includes refid="RotationPaintShader_8hpp" local="yes">./RotationPaintShader.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>string</label>
      </node>
      <node id="4">
        <label>GL/glew.h</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>./Shader.hpp</label>
        <link refid="Shader_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>glm/gtc/type_ptr.hpp</label>
      </node>
      <node id="2">
        <label>./RotationPaintShader.hpp</label>
        <link refid="RotationPaintShader_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>../../Bases/ReflectiveItem.hpp</label>
        <link refid="ReflectiveItem_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>glm/gtc/matrix_transform.hpp</label>
      </node>
      <node id="1">
        <label>src/KronUIGL/Shaders/RotationPaintShader.cpp</label>
        <link refid="RotationPaintShader_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>./../Paints/Paints.hpp</label>
        <link refid="Paints_8hpp"/>
      </node>
      <node id="5">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="RotationPaintShader_8cpp_1a6afe59eab2731bbe6028a1c474e6182a" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string fragmentCode</definition>
        <argsstring></argsstring>
        <name>fragmentCode</name>
        <initializer>=    R&quot;(#version 300 es
                                        precision mediump float;
                                        uniform vec3 paint;
                                        out vec3 color;
                                        void <ref refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(){
                                           color = paint;
                                        })&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/RotationPaintShader.cpp" line="3" column="19" bodyfile="src/KronUIGL/Shaders/RotationPaintShader.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="RotationPaintShader_8cpp_1a97d354d2d18abdb3ffafeca95405cba7" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string vertexCode</definition>
        <argsstring></argsstring>
        <name>vertexCode</name>
        <initializer>=      R&quot;(#version 300 es
                                        precision mediump float;
                                        uniform mat4 transformation;
                                        in vec3 position;
                                        void <ref refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()
                                        {
                                            gl_Position = transformation * vec4(position, 1.0);
                                        })&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/RotationPaintShader.cpp" line="10" column="19" bodyfile="src/KronUIGL/Shaders/RotationPaintShader.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="RotationPaintShader_8hpp" kindref="compound">./RotationPaintShader.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="RotationPaintShader_8cpp_1a6afe59eab2731bbe6028a1c474e6182a" kindref="member">fragmentCode</ref><sp/>=<sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(#version<sp/>300<sp/>es</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>mediump<sp/>float;</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>vec3<sp/>paint;</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>vec3<sp/>color;</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>main(){</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>paint;</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="RotationPaintShader_8cpp_1a97d354d2d18abdb3ffafeca95405cba7" kindref="member">vertexCode</ref><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(#version<sp/>300<sp/>es</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>mediump<sp/>float;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>mat4<sp/>transformation;</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>vec3<sp/>position;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>main()</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>transformation<sp/>*<sp/>vec4(position,<sp/>1.0);</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><ref refid="classRotationPaintShader_1ab697304665b2b0cfbcf32070c930f385" kindref="member">RotationPaintShader::RotationPaintShader</ref>(std::string<sp/>reflectiveName):<ref refid="classShader" kindref="compound">Shader</ref>(reflectiveName+</highlight><highlight class="stringliteral">&quot;RotationPaintShader.&quot;</highlight><highlight class="normal">,<ref refid="RotationPaintShader_8cpp_1a97d354d2d18abdb3ffafeca95405cba7" kindref="member">vertexCode</ref>,<ref refid="RotationPaintShader_8cpp_1a6afe59eab2731bbe6028a1c474e6182a" kindref="member">fragmentCode</ref>){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;use&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use();std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SetPlacementMatrix&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetPlacementMatrix(1,0,0,0,0);std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;setPaint&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setPaint(0.5,0.5,0.5);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRotationPaintShader_1ae87bdf843d053cdb5f86d5b33142a09f" kindref="member">RotationPaintShader::SetPlacementMatrix</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>PlacementMatrix<sp/>=<sp/>glm::rotate(glm::mat4(scale),<sp/>glm::radians(angle),<sp/>glm::vec3(x,y,z));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShader_1a8e711c96f3e1722cbfb88fde9478977c" kindref="member">setMat4</ref>(transformation_var,PlacementMatrix);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRotationPaintShader_1a00674a2c1eb135065ea45268e977be0f" kindref="member">RotationPaintShader::setPaint</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Color<sp/>=<sp/>glm::vec3(R,G,B);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShader_1aeb021061c5d451329d92257b07dbfec3" kindref="member">setVec3</ref>(paint_var,Color);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/KronUIGL/Shaders/RotationPaintShader.cpp"/>
  </compounddef>
</doxygen>
