<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classShaderManager" kind="class" language="C++" prot="public">
    <compoundname>ShaderManager</compoundname>
    <includes refid="ShaderManager_8hpp" local="no">ShaderManager.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classShaderManager_1a4c708de9ef4af4c062026b216cf27fb1" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classShader" kindref="compound">Shader</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Shader&gt; &gt; ShaderManager::shaders</definition>
        <argsstring></argsstring>
        <name>shaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="12" column="17" bodyfile="src/KronUIGL/Shaders/ShaderManager.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classShaderManager_1ac9a9bfc3cfec32a105ed40f1851942c9" prot="protected" static="no" mutable="no">
        <type>std::optional&lt; std::shared_ptr&lt; <ref refid="classShader" kindref="compound">Shader</ref> &gt; &gt;</type>
        <definition>std::optional&lt;std::shared_ptr&lt;Shader&gt; &gt; ShaderManager::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="13" column="19" bodyfile="src/KronUIGL/Shaders/ShaderManager.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classShaderManager_1a3174fd362b96f5a956d1077bc6e33651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShaderManager::setShader</definition>
        <argsstring>(std::shared_ptr&lt; Shader &gt; s)</argsstring>
        <name>setShader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classShader" kindref="compound">Shader</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>set the currently used shader by opengl if it&apos;s not already used and is within the shader collection </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>shader to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="15" column="10" bodyfile="src/KronUIGL/Shaders/ShaderManager.cpp" bodystart="6" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classShaderManager_1ab2888d11e1eab202a669e4b5753a68d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShaderManager::addShader</definition>
        <argsstring>(std::shared_ptr&lt; Shader &gt; s)</argsstring>
        <name>addShader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classShader" kindref="compound">Shader</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>check if shader is present in the shader collection and if not add it </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>shader to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="16" column="10" bodyfile="src/KronUIGL/Shaders/ShaderManager.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classShaderManager_1aba2a567fecc0fc1fd0b82cc6a0407221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShaderManager::remShader</definition>
        <argsstring>(std::shared_ptr&lt; Shader &gt; s)</argsstring>
        <name>remShader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classShader" kindref="compound">Shader</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>check if shader is present in the shader collection and remove it </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>shader to be removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="17" column="10" bodyfile="src/KronUIGL/Shaders/ShaderManager.cpp" bodystart="28" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manages shaders. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/KronUIGL/Shaders/ShaderManager.hpp" line="10" column="1" bodyfile="src/KronUIGL/Shaders/ShaderManager.hpp" bodystart="10" bodyend="18"/>
    <listofallmembers>
      <member refid="classShaderManager_1ab2888d11e1eab202a669e4b5753a68d2" prot="public" virt="non-virtual"><scope>ShaderManager</scope><name>addShader</name></member>
      <member refid="classShaderManager_1ac9a9bfc3cfec32a105ed40f1851942c9" prot="protected" virt="non-virtual"><scope>ShaderManager</scope><name>current</name></member>
      <member refid="classShaderManager_1aba2a567fecc0fc1fd0b82cc6a0407221" prot="public" virt="non-virtual"><scope>ShaderManager</scope><name>remShader</name></member>
      <member refid="classShaderManager_1a3174fd362b96f5a956d1077bc6e33651" prot="public" virt="non-virtual"><scope>ShaderManager</scope><name>setShader</name></member>
      <member refid="classShaderManager_1a4c708de9ef4af4c062026b216cf27fb1" prot="protected" virt="non-virtual"><scope>ShaderManager</scope><name>shaders</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
